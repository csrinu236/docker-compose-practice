version: '3.8'
services:
  mongodb: # Be careful, all these are container names.
    image: mongo
    restart: always
    volumes:
      - mongodb-data:/data/db
    # you should also define named volumes(anonymous and bindmountd no need to specify)
    # at the bottom to share this volume among multiple containers
    # environment:
    # way1 => key value pairs(not recommended)
    # MONGO_INITDB_ROOT_USERNAME: srinu
    # MONGO_INITDB_ROOT_PASSWORD: secret
    # way2 => putting it in env file (recommended)
    env_file: ./environments/mongo.env
    # networks: #optional
    # - srinu-network
    # Actually docker compose takes care of creating a network and adding containers to it
    # but if you have already created network manually, you want specify, you can do it like above

  # starting docker-compose
  # docker-compose up => not only builds individual images but also starts
  # each and every container simultaneously. No need a seperate start command needed.

  # When you run docker-compose up, you will see the following
  # <name of root project in which docker-compose.yaml exists>_<default things from docker-compose>
  # [+] Running 3/3
  # ✔ Network docker-compose-setup_default        Created=>Default network Created
  # ✔ Volume "docker-compose-setup_mongodb-data"  Created
  # ✔ Container docker-compose-setup-mongodb-1    Created=>Image built and Container Started
  # Attaching to docker-compose-setup-mongodb-1  Default mode for all containers is attached mode
  # docker-compose up -d => starts the container in detached mode.

  # if you wanna stop all services, deletes all services and delete networks
  # docker-compose down => volumes are not deleted of course or else that defeats the purpose of volumes and data persistence.
  # [+] Running 2/2
  #  ✔ Container docker-compose-setup-mongodb-1  Removed                                                                  0.2s
  #  ✔ Network docker-compose-setup_default      Removed

  # if you also want to delete volumes along with everything
  # docker-compose down -v
  # [+] Running 3/3
  #  ✔ Container docker-compose-setup-mongodb-1  Removed                                                                  0.0s
  #  ✔ Volume docker-compose-setup_mongodb-data  Removed                                                                  0.0s
  #  ✔ Network docker-compose-setup_default      Removed

  backend:
    # build: ./backend (not recommended, following reasons)
    # => short format is enough if you have Dockerfile
    # => COPY . . considers entire root folder which is not needed.
    # => Only /backend files should be copied while image is building

    build:
      context: ./backend
      dockerfile: Dockerfile
    # dockerfile: Dockerfile.prod
    # dockerfile: Dockerfile.dev
    # args:
    #   - some-arg: 1

    ports:
      - '80:80'

    volumes:
      - logs:/app/logs
      - ./backend:/app # this is actually bind mount(must be used for development purposes) relative to docker-compose.yaml file
      # Normally we set absolute path $(pwd):/app when we run containers using docker run command,
      # but docker-compose is smart enough to covert relative path to absolute path
      - /app/node_modules # anonymous volumes can be directly added without mentioning in the bottom volumes key

    env_file:
      - ./environments/backend.env

    # node container should be started only after mongo container up and running,
    # with depends_on propery we define it
    depends_on:
      - mongodb
      # - can have multiple containers that this container depends on.
      # For example any container that has front code or nginx image that
      # serves static files should be started only after mongo & node application starts

# docker-compose up -d
# [+] Running 5/5
#  ✔ Network docker-compose-setup_default        Created
#  ✔ Volume "docker-compose-setup_mongodb-data"  Created
#  ✔ Volume "docker-compose-setup_logs"          Created
#  ✔ Container docker-compose-setup-mongodb-1    Created
#  ✔ Container docker-compose-setup-backend-1    Created
# Attaching to docker-compose-setup-backend-1, docker-compose-setup-mongodb-1
# docker-compose-setup-mongodb-1, docker-compose-setup-backend-1 => these are also container names only.
# mongodb, backend => these are also container names for docker internal container communications.
# For example, we used 'mongodb' name as IP address(of mongodb container) in backend app's connection string
# to connect to mongodb container.

# docker-compose down => down without destroying volumes
# [+] Running 2/2
#  ✔ Container docker-compose-setup-backend-1   Removed
#  ✔ Container docker-compose-setup-mongodb-1   Removed

# docker-compose down -v
# [+] Running 5/5
#  ✔ Container docker-compose-setup-backend-1   Removed
#  ✔ Container docker-compose-setup-mongodb-1   Removed
#  ✔ Volume docker-compose-setup_logs           Removed
#  ✔ Volume docker-compose-setup_mongodb-data   Removed
#  ✔ Network docker-compose-setup_default       Removed

volumes:
  mongodb-data:
  logs:
